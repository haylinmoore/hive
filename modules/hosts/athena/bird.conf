define ASN = 923;
router id 199.255.18.178;

define LOCALv4 = [
   23.144.156.0/24
];

protocol static announce4 {
  ipv4;
  route 23.144.156.0/24 reject;
}

define LOCALv6 = [
  2602:FBF5::/48,
  2602:FBF5:3::/48
];

protocol static announce6 {
  ipv6;
  route 2602:FBF5::/48 reject;
  route 2602:FBF5:3::/48 reject;
}

# ---- Parameters ----
timeformat base iso long;
timeformat log iso long;
timeformat protocol iso long;
timeformat route iso long;

log syslog all;

protocol device {};

protocol direct { 
  ipv4; 
  ipv6; 
}

protocol kernel {
  scan time 10;
  
  ipv4 {
    export filter {
      if source = RTS_STATIC && proto != "announce4" then {
        accept;
      } else if source = RTS_BGP then {
        krt_prefsrc = 199.255.18.178;
        accept;
      }
      reject;
    };
  };
}

protocol kernel {
  scan time 10;
  ipv6 {
    export filter {
      if source = RTS_STATIC && proto != "announce6" then {
        accept;
      } else if source = RTS_BGP then {
        krt_prefsrc = 2602:fbf5:3::;
        accept;
      }
      reject;
    };
  };
}

# --- Blackholing ---
protocol static null4 {
  ipv4;
  route 192.0.2.1/32 blackhole;
}

protocol static null6 {
  ipv6;
  route 100::1/128 blackhole;
}

function set_blackhole() {
  if (net.type = NET_IP4) then {
    bgp_next_hop = 192.0.2.1;
    print "Added null route for ", net;
  }
  if (net.type = NET_IP6) then {
    bgp_next_hop = 100::1;
    print "Added null route for ", net;
  }
}

function process_blackholes() {
  if (((ASN,1,666) ~ bgp_large_community) && ((net.type = NET_IP4 && net.len = 32) || (net.type = NET_IP6 && net.len = 128))) then {
    set_blackhole();
  }
}

# ---- RPKI ----
roa4 table rpki4;
roa6 table rpki6;

protocol rpki {
  roa4 { table rpki4; };
  roa6 { table rpki6; };

  transport tcp;
  remote "rtr.rpki.cloudflare.com" port 8282;

  retry keep 90;
  refresh keep 900;
  expire keep 172800;
}


# ---- Filter Lists ----
# Prefix and ASN lists are adapted from https://github.com/neptune-networks/peering/blob/master/templates/bird.conf.erb and https://github.com/NLNOG/bgpfilterguide, check out those repos too!

define BOGONS_v4 = [
  0.0.0.0/8{8,32},
  10.0.0.0/8{8,32},
  100.64.0.0/10{10,32},
  127.0.0.0/8{8,32},
  169.254.0.0/16{16,32},
  172.16.0.0/12{12,32},
  192.0.2.0/24{24,32},
  192.88.99.0/24{24,32},
  192.168.0.0/16{16,32},
  198.18.0.0/15{15,32},
  198.51.100.0/24{24,32},
  203.0.113.0/24{24,32},
  224.0.0.0/3{3,32}
];

define BOGONS_v6 = [
  ::/8{8,128},
  64:ff9b::/96{96,128},
  100::/8{8,128},
  200::/7{7,128},
  400::/6{6,128},
  800::/5{5,128},
  1000::/4{4,128},
  2001::/33{33,128},
  2001:0:8000::/33{33,128},
  2001:2::/48{48,128},
  2001:3::/32{32,128},
  2001:10::/28{28,128},
  2001:20::/28{28,128},
  2001:db8::/32{32,128},
  2002::/16{16,128},
  3ffe::/16{16,128},
  4000::/3{3,128},
  5f00::/8{8,128},
  6000::/3{3,128},
  8000::/3{3,128},
  a000::/3{3,128},
  c000::/3{3,128},
  e000::/4{4,128},
  f000::/5{5,128},
  f800::/6{6,128},
  fc00::/7{7,128},
  fe80::/10{10,128},
  fec0::/10{10,128},
  ff00::/8{8,128}
];

define BOGON_ASNS = [
  0,
  23456,
  64496..64511,
  64512..65534,
  65535,
  65536..65551,
  65552..131071,
  4200000000..4294967294,
  4294967295
];

# Helper Functions

function _reject(string reason) {
  reject "REJECTED [", reason, "] pfx ", net, " session ", proto, " path ", bgp_path, " pathlen ", bgp_path.len, " origin ", bgp_path.last;
}

function reject_blocklist() {}

# Filtering Functions
function reject_transit_paths() {
  if (bgp_path ~ [174, 701, 702, 1239, 1299, 2914, 3257, 3320, 3356, 3491, 3549, 3561, 4134, 5511, 6453, 6461, 6762, 6830, 7018]) then _reject("transit path");
}

function honor_graceful_shutdown() {
  if (65535, 0) ~ bgp_community then bgp_local_pref = 0;
}

function reject_local() {
  if (net ~ LOCALv4) then _reject("own prefix");
  if (net ~ LOCALv6) then _reject("own prefix");
}

function reject_bogon_asns() {
  if (bgp_path ~ BOGON_ASNS) then {
    
    _reject("bogon ASN in path");
  }
}

function reject_long_as_paths() {
  if (bgp_path.len > 100) then _reject("long AS path");
}

function reject_rpki_invalid() {
  if (net.type = NET_IP4) then {
    if (roa_check(rpki4, net, bgp_path.last_nonaggregated) = ROA_INVALID) then _reject("RPKI invalid");
  }

  if (net.type = NET_IP6) then {
    if (roa_check(rpki6, net, bgp_path.last_nonaggregated) = ROA_INVALID) then _reject("RPKI invalid");
  }
  
}

function force_rpki_strict() {
  if (net.type = NET_IP4) then {
    if (roa_check(rpki4, net, bgp_path.last_nonaggregated) != ROA_VALID) then _reject("RPKI != ROA_VALID");
  }

  if (net.type = NET_IP6) then {
    if (roa_check(rpki6, net, bgp_path.last_nonaggregated) != ROA_VALID) then _reject("RPKI != ROA_VALID");
  }
  
}

function reject_out_of_bounds_routes() {
  if (net.type = NET_IP4) then {
    if (net.len > 24 || net.len < 8) then _reject("out of bounds (24 > len > 8)");
  }

  if (net.type = NET_IP6) then {
    if (net.len > 48 || net.len < 12) then _reject("out of bounds (48 > len > 12)");
  }
}

function reject_bogon_routes() {
  if (net.type = NET_IP4) then {
    if (net ~ BOGONS_v4) then _reject("bogon route");
  }

  if (net.type = NET_IP6) then {
    if (net ~ BOGONS_v6) then _reject("bogon route");
  }
}

function enforce_first_as(int peer_asn) {
  if (bgp_path.first != peer_asn) then _reject("invalid first AS");
}

function enforce_peer_nexthop(ip addr) {
  if (bgp_next_hop != addr) then _reject("nexthop doesn't match neighbor address");
}

# Processing Functions
function remove_private_asns() {
  bgp_path.delete([64512..65534, 4200000000..4294967294]);
}

function accept_local() {
  if (net ~ LOCALv4) then {
    accept;
  }

  if (net ~ LOCALv6) then {
    accept;
  }
}

# Cofractal AS26073
define AS26073_COFRACTAL_IMPORT_v4 = 20000000;
define AS26073_COFRACTAL_IMPORT_v6 = 20000000;
define AS26073_COFRACTAL_EXPORT_v6 = 99;
define AS26073_COFRACTAL_EXPORT_v4 = 99;
define AS26073_COFRACTAL_PFX_v4 = -empty-;
define AS26073_COFRACTAL_PFX_v6 = -empty-;

filter AS26073_COFRACTAL_IMPORT {
    reject_bogon_routes();
    reject_bogon_asns();
    reject_out_of_bounds_routes();
    reject_rpki_invalid();
    enforce_first_as(26073);
    reject_blocklist();
    bgp_community.delete([(923, *)]);
    bgp_large_community.delete([(923, *, *)]);
    bgp_local_pref = 100;
    honor_graceful_shutdown();
    bgp_community.add((923,12));
    bgp_large_community.add((923,0,12));
    accept;
}

filter AS26073_COFRACTAL_EXPORT { 
    remove_private_asns();
    bgp_local_pref = 100;
    preference = 100;
    accept_local();
    if ((923,15) ~ bgp_community) then accept;
    if ((923,0,15) ~ bgp_large_community) then accept;
    reject;
}

protocol bfd COFRACTAL_AS26073_R1_BFD {
  neighbor 2606:7940:32:36::2;
  interface "*" {
    interval 100 ms;
    multiplier 5;
  };
}

protocol bfd COFRACTAL_AS26073_R2_BFD {
  neighbor 2606:7940:32:36::3;
  interface "*" {
    interval 100 ms;
    multiplier 5;
  };
}

protocol bgp COFRACTAL_AS26073_R1 {
    local 2606:7940:32:36::10 as ASN port 179;
    neighbor 2606:7940:32:36::2 as 26073 port 179;
    allow local as ASN;
    bfd on;

    ipv6 {
        next hop self;
        import keep filtered;
        import limit AS26073_COFRACTAL_IMPORT_v6 action disable;
        export limit AS26073_COFRACTAL_EXPORT_v6 action disable;

        import filter AS26073_COFRACTAL_IMPORT;
        export filter AS26073_COFRACTAL_EXPORT;
    };

    ipv4 {
        next hop address 2606:7940:32:36::10;
        import keep filtered;
        import limit AS26073_COFRACTAL_IMPORT_v4 action disable;
        export limit AS26073_COFRACTAL_EXPORT_v4 action disable;
        extended next hop yes;

        import filter AS26073_COFRACTAL_IMPORT;
        export filter AS26073_COFRACTAL_EXPORT;
    };
}

protocol bgp COFRACTAL_AS26073_R2 {
    local 2606:7940:32:36::10 as ASN port 179;
    neighbor 2606:7940:32:36::3 as 26073 port 179;
    allow local as ASN;
    bfd on;

    ipv6 {
        next hop self;
        import keep filtered;
        import limit AS26073_COFRACTAL_IMPORT_v6 action disable;
        export limit AS26073_COFRACTAL_EXPORT_v6 action disable;

        import filter AS26073_COFRACTAL_IMPORT;
        export filter AS26073_COFRACTAL_EXPORT;
    };

    ipv4 {
        next hop address 2606:7940:32:36::10;
        import keep filtered;
        import limit AS26073_COFRACTAL_IMPORT_v4 action disable;
        export limit AS26073_COFRACTAL_EXPORT_v4 action disable;
        extended next hop yes;

        import filter AS26073_COFRACTAL_IMPORT;
        export filter AS26073_COFRACTAL_EXPORT;
    };
}
